//================================================================================================//
//                                                                                                //
// PROJET       : DongleWifi GoodRace                                                             //
// MODULE       : Board                                                                           //
// DESCRIPTION  :                                                                                 //
// CREATION     : 27/01/2020                                                                      //
// HISTORIQUE   :                                                                                 //
//                                                                                                //
//================================================================================================//

//================================================================================================//
//                                        FICHIERS INCLUS                                         //
//================================================================================================//

#include "./mcu.h"

//================================================================================================//
//                                            DEFINES                                             //
//================================================================================================//

//================================================================================================//
//                                          ENUMERATIONS                                          //
//================================================================================================//

//================================================================================================//
//                                      STRUCTURES ET UNIONS                                      //
//================================================================================================//

////////////////////////////////////////////////////////////////////////////////////////////////////
//                                 VARIABLES PRIVEES ET PARTAGEES                                 //
////////////////////////////////////////////////////////////////////////////////////////////////////

//------------------------------------------------------------------------------------------------//
//---                                         Privees                                          ---//
//------------------------------------------------------------------------------------------------//
SoftwareSerial serialMCU(PA3, PA3);

const uint8_t bootStrap[256] PROGMEM = {0x8E, 0x00, 0xFF, 0xCE, 0x10, 0x00, 0x1C, 0x2D, 0x20, 0x6F, 0x35, 0x9D, 0x80, 0xC1, 0x52, 0x26, 0x13, 0x9D, 0x74, 0x18, 0xE6, 0x00, 0x9D, 0x98, 0xD6, 0x71, 0x9D, 0xBD, 0x9D, 0x80, 0xD6, 0x72, 0x9D, 0xBD, 0x20, 0xDC, 0xC1, 0x57, 0x26, 0x09, 0x9D, 0x74, 0x9D, 0x87, 0x18, 0xE7, 0x00, 0x20, 0xCF, 0xC1, 0x45, 0x26, 0x08, 0x86, 0x06, 0x9D, 0x74, 0x9D, 0xCE, 0x20, 0xC3, 0xC1, 0x43, 0x26, 0x04, 0x9D, 0xBD, 0x20, 0xBB, 0xC1, 0x56, 0x26, 0x0E, 0x9D, 0x74, 0x9D, 0x87, 0x86, 0x16, 0x9D, 0xCE, 0x86, 0x02, 0x9D, 0xCE, 0x20, 0xA9, 0xC1, 0x47, 0x26, 0xA5, 0x9D, 0x74, 0x18, 0x3C, 0x38, 0x18, 0xDE, 0xCC, 0xCD, 0xEF, 0x08, 0x9E, 0xCC, 0x18, 0x1D, 0x01, 0x10, 0x18, 0x1C, 0x01, 0xC0, 0x3B, 0x00, 0x00, 0x00, 0x9D, 0x87, 0xD7, 0x71, 0x9D, 0x87, 0xD7, 0x72, 0x18, 0xDE, 0x71, 0x39, 0x1F, 0x2E, 0x20, 0xFC, 0xE6, 0x2F, 0x39, 0x9D, 0x80, 0x9D, 0xB4, 0x58, 0x58, 0x58, 0x58, 0xD7, 0x73, 0x9D, 0x80, 0x9D, 0xB4, 0xDA, 0x73, 0x39, 0xD7, 0x73, 0x54, 0x54, 0x54, 0x54, 0x9D, 0xAB, 0xD7, 0x71, 0xD6, 0x73, 0xC4, 0x0F, 0x9D, 0xAB, 0xD7, 0x72, 0x39, 0xC1, 0x09, 0x23, 0x02, 0xCB, 0x07, 0xCB, 0x30, 0x39, 0xC1, 0x39, 0x23, 0x02, 0xCB, 0x09, 0xC4, 0x0F, 0x39, 0x1F, 0x2E, 0x80, 0xFC, 0xE7, 0x2F, 0x39, 0x0F, 0x9F, 0xCA, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0xA7, 0x3B, 0x18, 0xE7, 0x00, 0x6C, 0x3B, 0x3C, 0xCE, 0x0D, 0x05, 0x09, 0x26, 0xFD, 0x38, 0x6F, 0x3B, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static e_MCU _e_mcu = MCU_IDLE;

//------------------------------------------------------------------------------------------------//
//---                                        Partagees                                         ---//
//------------------------------------------------------------------------------------------------//

////////////////////////////////////////////////////////////////////////////////////////////////////
//                                 FONCTIONS PRIVEES ET PARTAGEES                                 //
////////////////////////////////////////////////////////////////////////////////////////////////////

//------------------------------------------------------------------------------------------------//
//---                                         Privees                                          ---//
//------------------------------------------------------------------------------------------------//
void _mcuReset(void)
{
    GPIO_MCU_RESET_ON();
    delay(100);
    GPIO_MCU_RESET_OFF();
    delay(100);
    GPIO_MCU_RESET_ON();
    delay(100);
    serialMCU.write(0xFF);
    serialMCU.flush();
}

//------------------------------------------------------------------------------------------------//
//---                                        Partagees                                         ---//
//------------------------------------------------------------------------------------------------//

//--------------------------------------------------------------------------------------------------
// FONCTION    : COMPC_TaskInit
//
// DESCRIPTION : Initialisation de la carte : GPIO, Clocks, Interruptions...
//--------------------------------------------------------------------------------------------------
bool MCU_TaskInit(void)
{
    serialMCU.begin(1200);
    return true;
}

bool MCU_TaskUpdate(void *p)
{
    s_EVENT *event = (s_EVENT *)p;
    if (event->type & MCU_EVENT)
    {
        _e_mcu = (e_MCU)event->mcu.state;
        EVENT_Clear(MCU_TASK_ID, MCU_EVENT);
    }
    return true;
}

void MCU_TaskRun(void)
{
    switch (_e_mcu)
    {
    case (MCU_IDLE):
    {
        break;
    }
    case (MCU_LOAD_LOADER):
    {
        unsigned long _ms = millis();
        uint8_t nbError = 0;

        //-- send bootstrap
        for (int i = 0; i < 256; i++)
        {
            _ms = millis();
            serialMCU.write(bootStrap[i]);
            while (serialMCU.available() == false){
                if ( (millis() - _ms) > 100 ){
                    nbError++;
                    if ( nbError >= 30 ){
                        s_MCU_EVENT ev;
                        ev.state = MCU_ERROR;
                        EVENT_Push(SCREEN_TASK_ID , MCU_EVENT , &ev);
                        _e_mcu = MCU_IDLE;
                        return;
                    }
                     _ms = millis();
                }  
            }
            int data = serialMCU.read();
            _ms = millis();
        }
        _e_mcu = MCU_IDLE;
        break;
    }
    }
}
